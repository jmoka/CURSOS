// TIPOS DE VARIÁVEIS 
// NÚMEROS, STRING, BOOLEANi (True, False), UNDEFINED(não está definido), NULL(serve para apagar uma informação de uma variável) 
let tipo_numero=1
let tipo_string="string"
let tipo_boolean=false
let tipo_nao_definido 

document.write(tipo_numero + ", " + typeof tipo_numero + "<br> ")
document.write(tipo_string + ", " + typeof tipo_string + "<br> ")
document.write(tipo_boolean + ", " + typeof tipo_boolean + "<br> ")
document.write(tipo_nao_definido + ", " + typeof tipo_nao_definido + "<br> ")


//! Tipos de Declarações
//TODO: SOMENTE O NOME
//TODO: USANDO "VAR"
//TODO: USANDO "LET"
//TODO: USANDO "CONST"

// ! AS VARIÁVEIS PODEM SER DECLARADAS INDIVIDUALMENTE OU EM GRUPO ( podendo ser VAR, LET OU CONST)
// DESSA FORMA AS VARIÁVEIS ESTÃO DECLARADAS MAS NÃO FORAM ATRIBUIDOS VALORES COM ISSO SEU VALOR É undefined
var nomes
var nome
console.log("VARIAVEL NOME", nomes)

// TODO: DECLARANDO VARIÁVEIS MULTIPAS COM VALORES

var nome="JOÃO" 
var endereco="RUA 12"
var telefone=965235

console.log("VARIAVEL NOMEuuu : "+ nome)
//document.write("VARIAVEL NOME : " + nome + "<br> <br>")

console.log("VARIAVEL ENDEREÇO : "+ endereco)
//document.write("VARIAVEL ENDEREÇO : "+ endereco, " <br> <br>")

console.log("VARIAVEL TELEFONE : " + telefone)
//document.write("VARIAVEL TELEFONE  : "+ telefone+ " <br> <br>")


/*
!SOMENTE O NOME
NÃO USAMOS NADA PARA DECLARAR A VARIÁVEL , USA-SE SOMENTE O NOME 

TODO: SOMENTE O NOME DA VARIÁVEL
NESSE CASO NÃO SE CONSIDERA UMA BOA PRÁTICA, POIS PODE HAVER EM ALGUMOMENTO DO CÓDIGO REDUNDANCIAS E FALTA DE SEGURANÇA
DAS INFORMAÇÕES: EX:
*/
x="variável x"
console.log("ESSA VARIÁVEL É A "+ x + " E FOI DECLARADA SOMENTE COMO NOME");
//document.write("ESSA VARIÁVEL É A "+ x + " E FOI DECLARADA SOMENTE COMO NOME <br> <br>");



/*
!USANDO "VAR"
DESSA FORMA SE DECLARA A VARIÁVEL INICIANDO COM "VAR"
PORÉM COM AS NOVAS PRÁTICAS E A NOVA ATUALIZAÇÃO DO JAVASCRIP CRIOU-SE O LET PARA SANAR ALGUMAS FALHAS NO "VAR"

* O "VAR" > A VARIAVEL PODE SER ACESSADA DE QUALQUER PONTO, MESMO QUE ELA ESTEJA DENTRO DE UM IF OU FUNÇÃO
* A VARIÁVEL DECLARADA COM "VAR" , SEU VALOR PODE SER ACESSADO FORA DO ESCOPO , VEJA O EXEMPLO:

*/



//todo:  A VARIÉVEL ESTA DECLARADA NO ESCOPO DO IF E MESMO ASSIM ELA ESTÁ ACESSIVEL FORA DO ESCOPO
if (true){
    var y="variável esta dentro do escopo de um if, "
}

console.log("ESSA " + y + "E FOI DECLARADA SOMENTE COMO VAR")
//document.write("ESSA "+ y + " E FOI DECLARADA SOMENTE COMO VAR <br> <br>")


/*
!USANDO "LET"
DESSA FORMA SE DECLARA A VARIÁVEL INICIANDO COM "LET"
COM AS NOVAS PRÁTICAS E A NOVA ATUALIZAÇÃO DO JAVASCRIP O LET FOI CRIADO PARA SANAR ALGUMAS FALHAS NO "VAR"
COMO NÃO DEIXAR COM QUE A VARIÁVEL SEJA ACESSADA QUANDO ELA ESTIVER DECLARADA DENTRO DE ALGUM ESCOPO

* O "LET" > NÃO PERMITE COM QUE A VARIAVEL POSSA SER ACESSADA DE QUALQUER PONTO, QUANDO ELA ESTIVER DENTRO DE UM IF OU FUNÇÃO
* A VARIÁVEL DECLARADA COM "LET" , SEU VALOR NÃO PODE SER ACESSADO FORA DO ESCOPO , VEJA O EXEMPLO:

*/



//todo:  A VARIÉVEL ESTA DECLARADA NO ESCOPO DO IF E MESMO ASSIM ELA ESTÁ ACESSIVEL FORA DO ESCOPO
if (true){
    let x ="variável esta dentro do escopo de um if, "
}

console.log("A VARIÁVEL QUE ESTÁ DENTRO DO ESCOPO DECLARADA COM LET ", x, " NÃO PODE SER ACESSADO SEU VALOR")
//document.write("A VARIÁVEL QUE ESTÁ DENTRO DO ESCOPO DECLARADA COM LET ", x, " NÃO PODE SER ACESSADO SEU VALOR <br> <br>")



/*
!USANDO "CONST"
DESSA FORMA SE DECLARA A VARIÁVEL INICIANDO COM "CONST"
COM AS A VARIÁVEL QUE FOR DECLARADA COM CONST NÃO PODERÁ SOFRER ALTERAÇÃO E NEM SER ACESSADA FORA DO ESCOPO


* O "COPNST" > NÃO PERMITE COM QUE A VARIAVEL POSSA SER ACESSADA DE QUALQUER PONTO, QUANDO ELA ESTIVER DENTRO DE UM IF OU FUNÇÃO
* A VARIÁVEL DECLARADA COM "CONST" , SEU VALOR NÃO PODE SER ACESSADO FORA DO ESCOPO E NEM SER MODIFICADO , VEJA O EXEMPLO:

*/



//todo:  A VARIÉVEL ESTA DECLARADA NO ESCOPO DO IF E MESMO ASSIM ELA ESTÁ ACESSIVEL FORA DO ESCOPO
if (true){
    const x ="variável esta dentro do escopo de um if, "
}


console.log("A VARIÁVEL QUE ESTÁ DENTRO DO ESCOPO DECLARADA COM CONST ", x, " NÃO PODE SER ACESSADO SEU VALOR")
//document.write("A VARIÁVEL QUE ESTÁ DENTRO DO ESCOPO DECLARADA COM CONST ", x, " NÃO PODE SER ACESSADO SEU VALOR <br> <br>")

const d="VARIAVEL D DECLARADA COM CONST"
console.log("A VARIÁVEL QUE ESTÁ FORA DO ESCOPO DECLARADA COM CONST ", d)
//document.write("A VARIÁVEL QUE ESTÁ FORA DO ESCOPO DECLARADA COM CONST ", d, "<br> <br>")


// ! "MUDANÇA NO VALOR DA VARIÁVEL"

// O VALOR DAS VARIÁVEIS PODEM MUDAR NO DECORRER DO PROGRAMA EXCETO AS VARIÁVEIS DECLARADAS CONO CONST, EX:

q=1
console.log("VARIÁVEL SEM SER DECLARADA COM VALOR ", q)
q=2
console.log("VARIÁVEL SEM SER DECLARADA COM VALOR TROCADO PARA ", q)

//*VAR
var m=1
console.log("VARIÁVEL DECLARADA COM VAR ", m)
m=2
console.log("VARIÁVEL DECLARADA COM VAR COM VALOR TROCADO PARA ", m)


//*LET
var n=1
console.log("VARIÁVEL DECLARADA COM LET ", n)
n=2
console.log("VARIÁVEL DECLARADA COM LET COM VALOR TROCADO PARA ", n)


//*CONST
const p=1
console.log("VARIÁVEL DECLARADA COM CONST ", p)
// ! OBSERVE QUE não IRÁ SER IMPRESSO NA PAGINA ESSA LINHA POIS NÃO E PERMITIDO A TROCA DE VALOR DE UMA CONSTANTE
// * E NO CONSOLE HAVERÁ UM ERRO
// p=2 // ! ERRO NESSA LINHA , NÃO É PERMITIDO A TROCA DO VALOR DA CONSTANTE
console.log("VARIÁVEL DECLARADA COM CONST COM VALOR TROCADO PARA ", p)
console.log("VARIÁVEL DECLARADA COM CONST COM VALOR TROCADO PARA ", p)




   
